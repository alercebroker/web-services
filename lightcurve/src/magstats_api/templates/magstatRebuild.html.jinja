<script id="htmx-script" src="https://unpkg.com/htmx.org@1.9.11"></script>
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0">
<link rel="stylesheet" href="{{API_URL}}/static/magstats.css">


    <div id='magstats-app' class="tw-flex tw-preflight tw-text-[#1e1e1e] dark:tw-text-white tw-bg-white tw-shadow-2xl dark:tw-bg-[#1e1e1e] tw-rounded-[6px] tw-relative tw-mt-3 tw-w-full tw-text-sm">

        <div class="tw-inline tw-text-black dark:tw-text-white tw-flex tw-items-center">
            <div class="tw-inline tw-text-black dark:tw-text-white">
                <h1 class="tw-font-bold tw-text-2xl tw-pt-[30px] tw-pl-[5px] tw-mb-[20px] tw-text-black dark:tw-text-white">Magnitude Statistics</h1>
            </div>

            <div class="tw-inline tw-relative tw-ml-2 tw-mt-[10px] tw-group">
                <svg class="tw-h-6 tw-w-6 tw-text-gray-900 dark:tw-text-white" data-slot="icon" fill="none" stroke-width="1.5" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                    <path path stroke-linecap="round" stroke-linejoin="round" d="M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9 5.25h.008v.008H12v-.008Z"></path>
                </svg>
                <div class="tw-absolute tw-left-10 tw-mt-2 tw-hidden group-hover:tw-flex tw-flex-col tw-items-center tw-z-[9999] group-hover:tw-opacity-60">
                    <div class="tw-bg-gray-900 tw-text-red-500 tw-text-xs tw-rounded tw-px-4 tw-py-2">
                        There is a matching source in the reference image. The apparent magnitude combines the difference and reference fluxes.
                    </div>
                </div>
            </div>
        </div>

        <div class="tw-preflight dark:tw-text-white tw-text-black" id="tableContainer">
            
        </div>

        <div class="tw-w-[95%] tw-mx-auto tw-text-sm">
            <div class="tw-flex tw-justify-between tw-items-center tw-pt-[25px]">
                <div class="tw-flex tw-items-center tw-space-x-2">
                    <label class="tw-text-black dark:tw-text-white">Rows per page:</label>
                    <button class="tw-relative hover:tw-cursor-pointer" onclick="changeMenuArrow()">
                            <select id="rowSelect" class="tw-text-black tw-bg-white dark:tw-text-white dark:tw-bg-[#1e1e1e] tw-border-b tw-pr-2 tw-appearance-none tw-pointer-events-auto">
                                <option value="5">5</option>
                                <option value="10">10</option>
                                <option value="14">All</option>
                            </select>
                            {# <div id="menuArrow" class="tw-absolute tw-right-0 tw-top-1/2 tw-transform -tw-translate-y-1/2 tw-pointer-events-none">
                            </div> #}
                    </button>
                </div>
                <div class="tw-text-black dark:tw-text-white">
                    <span id="first-number" class="tw-text-black dark:tw-text-white"></span> - <span id="second-number" class="tw-text-black dark:tw-text-white"></span> of <span id="total-number" class="tw-text-black dark:tw-text-white"></span>
                </div>
                <div class="tw-text-sm">
                    <button onclick="navigateTable(-1)" class="tw-pr-[10px] tw-text-sm tw-rounded-full hover:tw-text-gray-600" id='leftArrow'> &lt; </button>
                    <button onclick="navigateTable(1)"  class="tw-pl-[10px] tw-text-sm tw-rounded-full hover:tw-text-gray-600" id="rightArrow"> &gt; </button></div>
            </div>
        </div>

    </div>

<script>

    // Only usefull definitions and getting the data from Python

    
    const bandMapping = {
        
        2:'r',
        3:'i',
        1:'g',
    }

    const tableContainer = document.getElementById('tableContainer');
    let currentPage = 1;
    
    const rawDb = {{stat_r | tojson}}
    const db = Object.values(rawDb)


    let numBands = []

    for (let i = 0; i < db.length; i++){
        numBands.push(db[i]['fid'])
        delete db[i]['fid']
    }

    let realBands = []

    for (let i = 0; i < numBands.length; i++){
        realBands.push(bandMapping[numBands[i]])
    }

    const numColumns = db.length + 1; // Esto  es numero de bandas + 1
    const numRows = Object.keys(db[0]).length; 

    function hasBodyClass(className) {
        const body = document.body;
        return body.classList.contains(className);
    }

    // Usage
    const isDarkMode = hasBodyClass('tw-dark');

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////

    // Here is created the table dinamicly.


    // This function creates the entire html structure dinamicly.
    function createTable() {
        
        let columNames = ['Stat'].concat(realBands)

        
        const tableContainer = document.getElementById("tableContainer");

        // Clear any existing table
        tableContainer.innerHTML = "";

        // Create the table element
        const table = document.createElement("table");
        table.classList = 'tw-preflight tw-overflow-auto tw-w-[95%] tw-mx-auto tw-table-full tw-justify-center tw-text-sm';

        //const colGroup = document.createElement('colgroup');
        //colGroup.classList = 'tw-w-[95%] tw-mx-auto';

        // Create the table header row
        const headerRow = document.createElement("tr");
        headerRow.classList = 'hover:tw-opacity-70 hover:tw-cursor-pointer dark:tw-text-white tw-text-black tw-w-full';

        for (let i = 0; i < numColumns; i++) {

            const th = document.createElement("th");
            th.textContent = columNames[i];

            const arrowButton = document.createElement('button');
            arrowButton.setAttribute('id','arrowButton');

            th.appendChild(arrowButton)
            headerRow.appendChild(th);
        }
        table.appendChild(headerRow);

        const tBody = document.createElement('tbody');
        tBody.setAttribute('id','dataTableBody');
        // Create the table data rows
        for (let i = 0; i < numRows; i++) {


            const dataRow = document.createElement("tr");
            dataRow.classList = 'tw-w-full tw-preflight hover:tw-bg-[#757575] dark:tw-text-white tw-text-black tw-border-b-[1px] tw-border-b-solid tw-border-b-black dark:tw-border-b-white tw-border-opacity-20 dark:tw-border-opacity-20'

            for (let j = 0; j < numColumns; j++) {
                const td = document.createElement("td");
                if (j < numColumns - 1){
                    td.setAttribute('style', `max-width: ${1/(numColumns-1)*100}%`);
                };
                td.id = `cell-${i}-${j}`;
                dataRow.appendChild(td);
            }
            tBody.appendChild(dataRow);
        }
        //table.appendChild(colGroup)
        table.appendChild(tBody)

        // Append the table to the container
        tableContainer.appendChild(table);
    }

    // This function inject the data into the html table created in createTable function
    function displayColumns(){

        if (boolColumns === 0){
            for (let j = 0; j < numRows; j++) {
                let name = 'cell-'+String(j)+'-'+String(0)
                document.getElementById(name).innerHTML = Object.keys(db[0])[j]
            }
            // Let's note that here i is for columns and j is for rows
            for (let i = 1; i < numColumns; i++){
                for (let j = 0; j < numRows; j++){
                    let name = 'cell-'+String(j)+'-'+String(i)
                    document.getElementById(name).innerHTML = Object.values(db[i-1])[j]   
                }
            }

            boolColumns = 1;

        } else {
            for (let j = 0; j < numRows; j++) {
                let name = 'cell-'+String(j)+'-'+String(0)
                document.getElementById(name).innerHTML = Object.keys(db[0])[numRows - j - 1]
            }
            for (let i = 1; i < numColumns; i++){
                for (let j = 0; j < numRows; j++){
                    let name = 'cell-'+String(j)+'-'+String(i)
                    document.getElementById(name).innerHTML = Object.values(db[i-1])[numRows - j - 1]   
                }
            }
            boolColumns = 0;
        }
    }

    // We call the function to create the html structure
    createTable()
    
    let boolColumns = 0;
    // We call the function to inject the data.
    displayColumns();

    //////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////////////////////////////////////////////////////////

    // From here the code is only for the display of the rows per page, the buttons and the display menu to select that

    const menuArrowDown = `<svg class="tw-h-5 tw-w-5 tw-text-black dark:tw-text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5" />
                            </svg>`;

    const menuArrowUp = `<svg class="tw-h-5 tw-w-5 tw-text-black dark:tw-text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                            <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 15.75 7.5-7.5 7.5 7.5" />
                        </svg>`;

    // We define the arrows to change the order of the rows display in the  table
    const arrowUp = `<svg class="tw-h-5 tw-w-6" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                    <path stroke="none" d="M0 0h24v24H0z"/>
                                    <line x1="12" y1="5" x2="12" y2="19" />
                                    <line x1="16" y1="9" x2="12" y2="5" />
                                    <line x1="8" y1="9" x2="12" y2="5" />
                                </svg>`;

    const arrowDown = `<svg class="tw-h-6 tw-w-6"  width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">  <path stroke="none" d="M0 0h24v24H0z"/>  <line x1="12" y1="5" x2="12" y2="19" />  <line x1="16" y1="15" x2="12" y2="19" />  <line x1="8" y1="15" x2="12" y2="19" /></svg>`;
    
    document.getElementById('arrowButton').innerHTML = arrowUp;

    // We add an event listener to detect if the user wants to change the order
    document.getElementById('arrowButton').addEventListener('click',() => {
        
        displayColumns();

        if (boolColumns === 1) {
            document.getElementById('arrowButton').innerHTML = arrowUp;
        } else { 
            document.getElementById('arrowButton').innerHTML = arrowDown;
        }

        }
    )

    const dataTableBody = document.getElementById('dataTableBody');
    
    // This function change the page of the table if there is less rows selected by the user to show
    function navigateTable(direction) {

        const rowSelect = document.getElementById('rowSelect');
        let rowsPerPage = parseInt(rowSelect.value);

        currentPage += direction;
        const totalPages = Math.ceil(dataTableBody.rows.length / rowsPerPage);

        if (currentPage < 1) {
            currentPage = 1;
        } else if (currentPage > totalPages) {
            currentPage = totalPages;
        }

        displayRows();
    }

    // This function decide what rows are showed depends of the rows per page selected by the user
    function displayRows() {
        const startIndex = (currentPage - 1) * rowsToShow;
        const endIndex = startIndex + rowsToShow;
        const totalRows = dataTableBody.rows.length;

        const leftArrow = document.getElementById('leftArrow');
        const rightArrow = document.getElementById('rightArrow');
        const firstNumber = document.getElementById('first-number');
        const secondNumber = document.getElementById('second-number');

        // Update numbers
        firstNumber.textContent = startIndex === 0 ? 1 : startIndex + 1;
        secondNumber.textContent = Math.min(endIndex, totalRows);

        // Update arrow colors
        console.log(startIndex);
        updateArrowColor(leftArrow, startIndex === 0);
        updateArrowColor(rightArrow, endIndex >= totalRows);

        // Show/hide rows
        Array.from(dataTableBody.rows).forEach((row, index) => {
            row.style.display = (index >= startIndex && index < endIndex) ? 'table-row' : 'none';
        });

    };

    function updateArrowColor(arrowElement, isDisabled) {
        arrowElement.classList.remove('tw-text-gray-400', 'tw-text-black', 'tw-text-white','dark:tw-text-white');
        if (isDisabled) {
            arrowElement.classList.add('tw-text-gray-400',);
        } else {
            arrowElement.classList.add('tw-text-black', 'dark:tw-text-white');
        };
    };


    let rowsToShow = 5;
    displayRows();

    document.getElementById('total-number').innerHTML = dataTableBody.rows.length;
    rowSelect.addEventListener('change', () => {
        rowsToShow = parseInt(rowSelect.value);
        currentPage = 1;
        displayRows();
    });
    
    


</script>

{# </div> #}
