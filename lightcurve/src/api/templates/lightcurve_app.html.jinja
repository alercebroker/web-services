<script id="htmx-script" src="https://unpkg.com/htmx.org@1.9.11"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<link rel="stylesheet" href="{{API_URL}}/static/main.css">
<script>
    // Conditionally loads css file to prevent duplicate downloading / parsing
    function isCssLoaded(url) {
        for (let css of document.styleSheets) {
            if (css.href === url) {
                return true;
            }
        }
        return false;
    }

    function conditionalCss(href) {
        if (!isCssLoaded(href)) {
            let link = document.createElement("link");
            link.href = href;
            link.type = "text/css";
            link.rel = "stylesheet";
            document.head.appendChild(link);
        }
    }

    function conditionalHTMX() {
        h = document.getElementById("htmx-script");
        if (h === null) {
            let script = document.createElement("script");
            script.src = "https://unpkg.com/htmx.org@1.9.11";
            script.id = "htmx-script";
            document.head.appendChild(script);
        }
    }

    conditionalHTMX();
    conditionalCss("{{API_URL}}/static/main.css");
    conditionalCss("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css");
</script>
<script>
    function configRequest(event) {
        if (event.detail.elt.id === "lc-dr") {
            let params = {}
            params['dr_ids'] = {{ dr_ids | tojson }}
            params['oid'] = "{{oid}}"
            params['plot_type'] = "{{plot_type}}"
            event.detail.parameters = params
        }
    }
    document.removeEventListener('htmx:configRequest', configRequest)
    document.addEventListener('htmx:configRequest', configRequest)
</script>

<div id="lightcurve-app" class="tw-preflight tw-bg-white dark:tw-bg-[#1e1e1e] dark:tw-text-white" style="height: 100%;">
    <div id="lc-main" style="width: 100%;  min-width: 0; min-height: 380px;"></div>
    <p id="plot-indicator" class="htmx-indicator">Loading...</p>
    <div class="tw-grid tw-grid-cols-6 tw-gap-2 tw-mx-2 tw-px-2">
        <div class="tw-col-span-3">
            {% import 'radio_button.html.jinja' as radio %}
            <div>
                {{ radio.radio_button("difference", plot_type == "difference", "Difference Magnitude", "The difference magnitude light curve is the absolute difference between science and reference magnitudes.") }}
            </div>
            <div>
                {{ radio.radio_button("apparent", plot_type == "apparent", "Apparent Magnitude", "Apparent magnitude light curve results from adding/subtracting the fluxes from the reference and difference in the same unit system and then converting to magnitudes.") }}
            </div>
            <div>
                {{ radio.radio_button("folded", plot_type == "folded", "Folded", "The period folded light curve, where time is transformed to time modulo the period (phase). Disabled if no period available.", disabled= (period | int ) == 0) }}
            </div>
        </div>
        <div class="tw-col-span-2">
            <input 
                id="check-dr" 
                type="checkbox" 
                value="dr" 
            />
            <label 
                id="check-dr-label"
                for="check-dr" 
            >
                Toggle DR
            </label>
            <div class="tooltip">
                <i class="fa fa-question-circle tw-me-2"></i>
                <div class="tooltip-text">
                    Show sources from ZTF Data Release 5
                </div>
                <i id="load-dr-spiner" class="fa fa-solid fa-spinner fa-spin" ></i>
            </div>
            <input 
                id="check-flux" 
                type="checkbox" 
                value="flux" 
            />
            <label for="check-flux">
                Toggle Flux
            </label>
            <div class="tooltip">
                <i class="fa fa-question-circle tw-me-2"></i>
                <div class="tooltip-text">
                    Toggle between flux and magnitude
                </div>
            </div>
        </div>
        <div>
            <button id="lc-dr"
                class="tw-text-xs tw-bg-blue-500 hover:tw-bg-blue-700 disabled:tw-bg-transparent disabled:tw-opacity-50 disabled:tw-outline tw-text-white tw-font-bold tw-py-1 tw-px-2 tw-rounded"
                hx-get="{{API_URL}}/htmx/lightcurve/dr" hx-swap="outerHTML" hx-trigger="click"
                hx-target="#lightcurve-app"
                hx-swap="outerHTML"
                hx-indicator="#plot-indicator"
            >
                <i class="fa fa-eye tw-me-2"></i>
                Filter DR
            </button>
            <a id="lc-download-ref" style="display: none;"></a>
            <button id="lc-download"
                class="tw-text-xs tw-bg-green-500 hover:tw-bg-green-700 tw-text-white tw-font-bold tw-py-1 tw-px-2 tw-rounded">
                <i class="fa fa-download tw-me-2"></i>
                Download
            </button>
        </div>
    </div>
    <script type="module">
        import { ApparentLightCurveOptions } from "{{API_URL}}/static/lc-apparent.js";
        import { DifferenceLightCurveOptions } from "{{API_URL}}/static/lc-difference.js";
        import { FoldedLightCurveOptions } from "{{API_URL}}/static/lc-folded.js";
        import * as echart from "{{API_URL}}/static/echarts.min.js";
        import { jdToDate } from "{{API_URL}}/static/astro-dates.js";
        import "{{API_URL}}/static/jszip.js"

        let plot_text_color = "#000";
        let plot_options;
        const detections = {{ lightcurve.detections | tojson }};
        const forced_photometry = {{ lightcurve.forced_photometry | tojson }};
        const non_detections = {{ lightcurve.non_detections | tojson }};
        let dr_detections = {{ dr_detections | tojson }};
        let dr = {{ dr | tojson }};
        let current_plot = "{{ plot_type }}";
        const period = {{ period | float }};

        const setPlot = () => {
            let flux = document.getElementById("check-flux").checked;
            const all_detections = getDetectionsWithDR();
            const diffOptions = new DifferenceLightCurveOptions(JSON.parse(JSON.stringify(detections)), non_detections, JSON.parse(JSON.stringify(forced_photometry)), plot_text_color, flux);
            const appOptions = new ApparentLightCurveOptions(all_detections, JSON.parse(JSON.stringify(forced_photometry)), plot_text_color, flux);
            const foldOptions = new FoldedLightCurveOptions(all_detections, JSON.parse(JSON.stringify(forced_photometry)), plot_text_color, period, flux);
            if (current_plot === "difference") {
                plot_options = diffOptions
            } 
            if (current_plot === "apparent") {
                plot_options = appOptions
            }
            if (current_plot === "folded") {
                plot_options = foldOptions
            }
            plot.setOption(plot_options.options, true);
            disableRadioButtons(diffOptions, appOptions, foldOptions);
        }

        function getDetectionsWithDR() {
            let all_detections = JSON.parse(JSON.stringify(detections));
            let check_dr = document.getElementById("check-dr");
            if (!check_dr.checked) {
                return all_detections
            }
            Object.keys(dr_detections).forEach((key) => {
                all_detections = all_detections.concat(JSON.parse(JSON.stringify( dr_detections[key] )));
            });
            return all_detections
        }

        function disableRadioButtons(diffOptions, appOptions, foldOptions) {
            const canDisplay = (options) => {
                let canDisplay = false
                options.series.forEach((s) => {
                    if (s.data.length > 0) {
                        canDisplay = true;
                    }
                });
                return canDisplay;
            };
            const apparent = document.getElementById("radio-apparent")
            apparent.disabled = !canDisplay(appOptions.options);
            apparent.classList.toggle("tw-opacity-50", !canDisplay(appOptions.options));
            apparent.classList.toggle("tw-bg-transparent", !canDisplay(appOptions.options));
            const check_dr = document.getElementById("check-dr")
            check_dr.disabled = !canDisplay(appOptions.options) || dr.length === 0;
            check_dr.classList.toggle("tw-opacity-50", check_dr.disabled);
            check_dr.classList.toggle("tw-bg-transparent", check_dr.disabled);
            const check_dr_label = document.getElementById("check-dr-label")
            check_dr_label.classList.toggle("tw-opacity-50", !canDisplay(appOptions.options));
            const lc_dr = document.getElementById("lc-dr")
            lc_dr.disabled = !canDisplay(appOptions.options) || dr.length === 0;
            const folded = document.getElementById("radio-folded")
            folded.disabled = !canDisplay(foldOptions.options) || period === 0.0;
            folded.classList.toggle("tw-opacity-50", !canDisplay(appOptions.options));
            folded.classList.toggle("tw-bg-transparent", !canDisplay(appOptions.options));
        }

        function showDataRelease() {
            if (current_plot === "apparent" || current_plot === "difference") {
                current_plot = "apparent";
            }
            setPlot();
            updateRadioButtons();
        }

        function plotOnClick(detection) {
            let index = plot_options.detections.findIndex((x) => x.mjd === detection.value[0])
            document.body.dispatchEvent(new CustomEvent('onDetectionClick', { detail: index }))
            const date = jdToDate(detection.value[0]).toUTCString().slice(0, -3) + 'UT'
            return {
                mjd: detection.value[0],
                date,
                index: index,
            }
        }

        function setColorSchemeWrapper(container) {
            function setColorScheme() {
                const color_scheme = container.classList.contains("tw-dark") ? "tw-dark" : "tw-light";
                if (color_scheme === "tw-dark") {
                    plot_text_color = "#fff";
                } else {
                    plot_text_color = "#000";
                }
                setPlot();
            }
            return setColorScheme;
        }


        function dateToString(date) {
            date = date.toISOString();
            date = date.replace(/[-:]/g, (c) => '');
            // date = date.replace('T', '_');
            date = date.split('T')[0];
            return date;
        }

        function jsonToCsv(arrayOfJson) {
            const replacer = (key, value) => (value === null ? '' : value);
            const header = Object.keys(arrayOfJson[0]);
            let csv = arrayOfJson.map((row) =>
                header
                    .map((fieldName) => JSON.stringify(row[fieldName], replacer))
                    .join(',')
            );
            csv.unshift(header.join(','));
            csv = csv.join('\r\n');
            return csv;
        }

        function expandExtraFields(detections) {
            return detections.map((d) => {
                if ('extra_fields' in d) {
                    let extra_fields = d.extra_fields;
                    delete d.extra_fields;
                    return { ...d, ...extra_fields };
                }
                return d;
            });
        }

        /* based in https://stackoverflow.com/questions/8847766/how-to-convert-json-to-csv-format-and-store-in-a-variable */
        function download(oid, detections, nonDetections, forcedPhotometry) {
            const today = dateToString(new Date())
            const filename = `${oid}_${today}.zip`;
            const zip = new JSZip();
            zip.file('detections.csv', jsonToCsv(expandExtraFields(JSON.parse(JSON.stringify(detections)))));
            zip.file('non_detections.csv', jsonToCsv(expandExtraFields(JSON.parse(JSON.stringify(nonDetections)))));
            if (forcedPhotometry.length > 0) {
                zip.file('forced_photometry.csv', jsonToCsv(expandExtraFields(JSON.parse(JSON.stringify(forcedPhotometry)))));
            }
            zip.generateAsync({ type: 'blob' }).then((content) => {
                const url = URL.createObjectURL(content);
                const a = document.getElementById("lc-download-ref");
                a.href = url;
                a.download = filename;
                a.click();
            });
        }

        function updateRadioButtons(){
            radio_buttons.forEach((r) => {
                r.checked = r.value === current_plot;
            });
        }

        document.getElementById("lc-download").addEventListener("click", () => download("{{oid}}", detections, non_detections, forced_photometry));

        const lc_main_elem = document.getElementById("lc-main");
        let plot = echarts.init(lc_main_elem);
        plot.on("click", plotOnClick);
        window.addEventListener("resize", plot.resize);
        let radio_buttons = document.querySelectorAll('input[type="radio"]');
        radio_buttons.forEach((radio) => {
            radio.addEventListener("click", (event) => {
                current_plot = event.target.value;
                setPlot();
                updateRadioButtons();
            });
        });
        let check_dr = document.getElementById("check-dr");
        {% if show_dr %}
        check_dr.checked = true;
        {% endif %}

        check_dr.addEventListener("change", (event) => {
            if (event.target.checked) {
                showDataRelease();
            } 
        
            else {
                setPlot();
            }
        });
        let check_flux = document.getElementById("check-flux");
        check_flux.addEventListener("change", setPlot);
        const container = document.getElementById("lightcurve-app");
        const color_scheme_observer = new MutationObserver(setColorSchemeWrapper(container));
        color_scheme_observer.observe(container, { attributes: true, attributeFilter: ["class"] });
        setColorSchemeWrapper(container)()
        
        function proccess_result_get_dr(dr_result) {
            // opcional: cuando respuesta desactivar flag llamada api dr
            let spiner = document.getElementById("load-dr-spiner")
            spiner.style.visibility = "hidden"
            console.log(dr_result)
            let res_detections = dr_result["dr_detections"];
            let res_dr = dr_result["dr"];
            if ( Object.keys(res_detections).length > 0) {
                console.log("ENTRO AL IF")
                dr_detections = res_detections;
                dr = res_dr;
                // enable checkbox and button
                const check_dr = document.getElementById("check-dr")
                check_dr.disabled = false
                const lc_dr = document.getElementById("lc-dr")
                lc_dr.disabled = false
            }
        }

        // request para pedir el dr
        const dr_route = "{{API_URL}}/lightcurve/dr/{{oid}}"
        fetch(dr_route).then(
            (result) => {
                return result.json()
            }
        ).then(
            (result) => {
                proccess_result_get_dr(result)
            }
        )

    </script>
</div>
