{% macro lightcurve_plot(oid, detections, non_detections, forced_photometry, dr, dr_detections, period) %}
<div id="lc-main" style="width: 100%; height: 100%; min-width: 0; min-height: 0;"></div>
<script type="module">
    import { DifferenceLightCurveOptions } from "{{API_URL}}/static/lc-difference.js";
    import { FoldedLightCurveOptions } from "{{API_URL}}/static/lc-folded.js";
    import { ApparentLightCurveOptions } from "{{API_URL}}/static/lc-apparent.js";
    import * as echart from "{{API_URL}}/static/echarts.min.js";
    import { jdToDate } from "{{API_URL}}/static/astro-dates.js";

    let plot_text_color = "#000";
    let current_plot = "difference";
    let plot_options;
    let period = {{ period }};
    let detections = {{ detections | tojson}};
    let non_detections = {{ non_detections | tojson }};
    let forced_photometry = {{ forced_photometry | tojson }};
    let dr = {{ dr | tojson}};
    let dr_detections = {{ dr_detections | tojson }};

    const setPlot = (type) => {
        current_plot = type;
        if (current_plot === "difference") {
          plot_options = new DifferenceLightCurveOptions(detections, non_detections, forced_photometry, plot_text_color);
        } else if (current_plot === "apparent") {
          plot_options = new ApparentLightCurveOptions(getDetectionsWithDR(), non_detections, forced_photometry, plot_text_color);
        } else if (current_plot === "folded" && period > 0) {
            plot_options = new FoldedLightCurveOptions(getDetectionsWithDR(), non_detections, forced_photometry, plot_text_color, period);
        }
        plot.setOption(plot_options.options, true);
        plot.resize()
    }

    function addErrorBars(options) {
        options.series.forEach((series) => {
            if (series.error_bars) {
                series.renderItem = renderError
            }
        })
    }

    function addAxisRange(options) {
        options.yAxis.min = (value) => value.min - 0.1
        options.yAxis.max = (value) => value.max + 0.1
    }

    function addTooltipFormatter(options){
        options.tooltip.formatter = formatTooltip
    }

    function handleDRChange(event, id) {
        const checked = event.target.checked;
        let dr_entry = dr.find((elem) => elem._id === id);
        dr_entry.checked = checked;
    }

    function getDetectionsWithDR() {
        const all_detections = [detections];
        dr.forEach((elem) => {
            if (elem.checked) {
                all_detections.push(dr_detections[elem._id]);
            }
        });
        return [].concat.apply([], all_detections);
    }
    function plotOnClick(detection) {
        let index = plot_options.detections.findIndex((x) => x.mjd === detection.value[0])
        document.body.dispatchEvent(new CustomEvent('onDetectionClick', { detail: index }))
        const date = jdToDate(detection.value[0]).toUTCString().slice(0, -3) + 'UT'
        return {
            mjd: detection.value[0],
            date,
            index: index,
        }
    }

    function setColorSchemeWrapper(container) {
        function setColorScheme() {
            const color_scheme = container.classList.contains("tw-dark") ? "tw-dark" : "tw-light";
            if (color_scheme === "tw-dark") {
                plot_text_color = "#fff";
            } else {
                plot_text_color = "#000";
            }
            window.setPlot(current_plot);
        }
        return setColorScheme;
    }

    function renderError(params, api) {
        const xValue = api.value(0)
        const highPoint = api.coord([xValue, api.value(1)])
        const lowPoint = api.coord([xValue, api.value(2)])
        const halfWidth = 1.9 // api.size([1, 0])[0] * 0.1
        const style = api.style({
          stroke: api.visual('color'),
          fill: null,
        })
        return {
          type: 'group',
          children: [
            {
              type: 'line',
              shape: {
                x1: highPoint[0] - halfWidth,
                y1: highPoint[1],
                x2: highPoint[0] + halfWidth,
                y2: highPoint[1],
              },
              style,
            },
            {
              type: 'line',
              shape: {
                x1: highPoint[0],
                y1: highPoint[1],
                x2: lowPoint[0],
                y2: lowPoint[1],
              },
              style,
            },
            {
              type: 'line',
              shape: {
                x1: lowPoint[0] - halfWidth,
                y1: lowPoint[1],
                x2: lowPoint[0] + halfWidth,
                y2: lowPoint[1],
              },
              style,
            },
          ],
        }
      }

      function formatTooltip(params) {
        if (params[0].seriesType == "custom") {
            return
        }
        const colorSpan = (color) =>
          '<span style="display:inline-block;margin-right:5px;border-radius:10px;width:9px;height:9px;background-color:' +
          color +
          '"></span>'
        const rowTable = (col1, col2, col3) =>
          '<tr> <td>' +
          col1 +
          '</td> <td>' +
          col2 +
          '</td> <td>' +
          col3 +
          '</td> </tr>'
        const dataReleaseTooltip = (params) => {
          const color = params.color
          const mjd = params.value[0]
          const mag = params.value[1].toFixed(3)
          const objectid = params.value[2]
          const magerr = params.value[3].toFixed(3)
          const field = params.value[4]
          const magnitude = `${mag} ± ${magerr}`
          const utcDate = jdToDate(mjd).toUTCString().slice(0, -3) + 'UT'
          let data = ''
          data += rowTable('', 'objectid: ', objectid)
          data += rowTable('', 'field: ', field)
          data += rowTable(colorSpan(color), `${params.seriesName}: `, magnitude)
          data += rowTable(calendarIcon(color), 'MJD: ', mjd)
          data += rowTable(calendarIcon(color), 'Date: ', utcDate)
          return data
        }
        const calendarIcon = (color) =>
          `<span class="mdi mdi-alarm" style='font-size:13px; color: ${color};'></span>`
        const serie = params[0].seriesName
        let table = '<table> <tr> <th></th> <th></th> <th></th></tr>'
        if (serie === 'r non-detections' || serie === 'g non-detections') {
          table += rowTable(
            colorSpan(params[0].color),
            params[0].seriesName + ':',
            params[0].value[1]
          )
          table += rowTable(
            calendarIcon(params[0].color),
            'MJD: ',
            params[0].value[0]
          )
          table += rowTable(
            calendarIcon(params[0].color),
            'Date: ',
            jdToDate(params[0].value[0]).toUTCString().slice(0, -3) + 'UT'
          )
          return table + '</table>'
        } else if (serie === 'r' || serie === 'g') {
          const isdiffpos = params[0].value[4] === 1 ? '(+)' : '(-)'
          const mag = params[0].value[1].toFixed(3)
          const err = params[0].value[3].toFixed(3)
          table += rowTable('', 'candid: ', params[0].value[2])
          table += rowTable(
            colorSpan(params[0].color),
            params[0].seriesName + ': ',
            `${isdiffpos} ${mag} ± ${err}`
          )
          table += rowTable(
            calendarIcon(params[0].color),
            'MJD: ',
            params[0].value[0]
          )
          table += rowTable(
            calendarIcon(params[0].color),
            'Date: ',
            jdToDate(params[0].value[0]).toUTCString().slice(0, -3) + 'UT'
          )
          table += rowTable('', 'click to change stamp', '')
          return table + '</table>'
        } else if (serie === 'r DR5' || serie === 'g DR5' || serie === 'i DR5') {
          table += dataReleaseTooltip(params[0])
          return table
        } else if (serie === 'r forced photometry' || serie === 'g forced photometry') {
          const isdiffpos = params[0].value[4] === 1 ? '(+)' : '(-)'
          const mag = params[0].value[1].toFixed(3)
          const err = params[0].value[3].toFixed(3)
          table += rowTable(
            colorSpan(params[0].color),
            params[0].seriesName + ': ',
            `${isdiffpos} ${mag} ± ${err}`
          )
          table += rowTable(
            calendarIcon(params[0].color),
            'MJD: ',
            params[0].value[0]
          )
          table += rowTable(
            calendarIcon(params[0].color),
            'Date: ',
            jdToDate(params[0].value[0]).toUTCString().slice(0, -3) + 'UT'
          )
          return table + '</table>'
        }
      }

    /* Initialize plot */
    const lc_main_elem = document.getElementById("lc-main");
    let plot = echarts.init(lc_main_elem);
    plot.on("click", plotOnClick);
    window.addEventListener("resize", plot.resize);
    window.setPlot = setPlot;
    window.handleDRChange = handleDRChange
    let container = document.getElementById("lightcurve-htmx-container");
    let color_scheme_observer = new MutationObserver(setColorSchemeWrapper(container));
    color_scheme_observer.observe(container, { attributes: true, attributeFilter: ["class"] });
    setColorSchemeWrapper(container)()
    window.addEventListener("load", setColorSchemeWrapper(container));
</script>
{% endmacro %}
