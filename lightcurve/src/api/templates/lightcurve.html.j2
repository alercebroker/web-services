<script>
    // Conditionally loads css file to prevent duplicate downloading / parsing
    function isCssLoaded(url) {
        for (let css of document.styleSheets) {
            if (css.href === url) {
                return true;
            }
        }
        return false;
    }

    function conditionalCss(href) {
        if (!isCssLoaded(href)) {
            let link = document.createElement("link");
            link.href = href;
            link.type = "text/css";
            link.rel = "stylesheet";
            document.head.appendChild(link);
        }
    }

    conditionalCss("{{API_URL}}/static/main.css");
    conditionalCss("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css");
</script>
<script type="module">
    import { DifferenceLightCurveOptions } from "{{API_URL}}/static/lc-difference.js";
    import { FoldedLightCurveOptions } from "{{API_URL}}/static/lc-folded.js";
    import { ApparentLightCurveOptions } from "{{API_URL}}/static/lc-apparent.js";
    import { PeriodogramOptions } from "{{API_URL}}/static/lc-periodogram.js";
    import "{{API_URL}}/static/jszip.js"
    import * as echart from "{{API_URL}}/static/echarts.min.js";
    import { jdToDate } from "{{API_URL}}/static/astro-dates.js";

    const oid = '{{ oid }}';
    const detections = {{ detections | tojson }};
    const non_detections = {{ non_detections | tojson }};
    const forced_photometry = {{ forced_photometry | tojson }};
    const dr = {{ dr | tojson }};
    const dr_detections = {{ dr_detections | tojson }};
    const default_period = {{ period }}

    let period = {{ period }};

    const lc_main_elem = document.getElementById("lc-main");
    const lc_table_elem = document.getElementById("lc-table");
    const lc_folded_period_elem = document.getElementById("lc-folded-period");

    const lc_periodogram_main_elem = document.getElementById("lc-periodogram-main");
    const lc_periodogram_button_elem = document.getElementById("lc-periodogram-button")
    const lc_folded_period_slider_elem = document.getElementById("lc-folded-period-slider");
    const lc_folded_period_value_elem = document.getElementById("lc-folded-period-value");

    let plot_text_color = "#000";
    let current_plot = "difference";
    let plot_options;



    function plotOnClick(detection) {
        let index = plot_options.detections.findIndex((x) => x.mjd === detection.value[0])
        document.body.dispatchEvent(new CustomEvent('onDetectionClick', { detail: index }))
        const date = jdToDate(detection.value[0]).toUTCString().slice(0, -3) + 'UT'
        return {
            mjd: detection.value[0],
            date,
            index: index,
        }
    }

    function dateToString(date) {
        date = date.toISOString();
        date = date.replace(/[-:]/g, (c) => '');
        // date = date.replace('T', '_');
        date = date.split('T')[0];
        return date;
    }

    function jsonToCsv(arrayOfJson) {
        const replacer = (key, value) => (value === null ? '' : value);
        const header = Object.keys(arrayOfJson[0]);
        let csv = arrayOfJson.map((row) =>
            header
                .map((fieldName) => JSON.stringify(row[fieldName], replacer))
                .join(',')
        );
        csv.unshift(header.join(','));
        csv = csv.join('\r\n');
        return csv;
    }

    /* based in https://stackoverflow.com/questions/8847766/how-to-convert-json-to-csv-format-and-store-in-a-variable */
    function download(oid, detections, nonDetections) {
        const today = dateToString(new Date())
        const filename = `${oid}_${today}.zip`;
        const zip = new JSZip();
        zip.file('detections.csv', jsonToCsv(detections));
        zip.file('non_detections.csv', jsonToCsv(nonDetections));
        zip.generateAsync({ type: 'blob' }).then((content) => {
            const url = URL.createObjectURL(content);
            const a = document.getElementById("lc-download-ref");
            a.href = url;
            a.download = filename;
            a.click();
        });
    }

    function getDetectionsWithDR() {
        const all_detections = [detections];
        dr.forEach((elem) => {
            if (elem.checked) {
                all_detections.push(dr_detections[elem._id]);
            }
        });
        return [].concat.apply([], all_detections);
    }

    window.handleDRChange = (event, id) => {
        const checked = event.target.checked;
        let dr_entry = dr.find((elem) => elem._id === id);
        dr_entry.checked = checked;
    }

    /* Initialize plot */
    let plot = echarts.init(lc_main_elem);
    plot.on("click", plotOnClick);
    window.addEventListener("resize", plot.resize);

    // Initialize periodogram 
    let is_periodogram_built = false;
    function build_priodogram() {
        lc_periodogram_main_elem.hidden = false;
        let periodogram_plot = echarts.init(lc_periodogram_main_elem);
        window.addEventListener("resize", periodogram_plot.resize);

        const fid_map = {
            1: "g",
            2: "r",
        }

        const mjd = detections.map((detection) => detection["mjd"]);
        const brightness = detections.map((detection) => detection["mag_corr"]);
        const e_brightness = detections.map((detection) => detection["e_mag_corr"]);
        const fid = detections.map((detection) => fid_map[detection["fid"]]);

        const periodogram_plot_options = new PeriodogramOptions(detections);


        fetch("http://192.168.1.21:8000/compute_periodogram/", {
            method: "POST",
            headers: { 'content-type': 'application/json' },
            body: JSON.stringify({
                mjd,
                brightness,
                e_brightness,
                fid
            })
        }).then((res) => {
            return res.json()
        }).then((periodogram) => {
            periodogram_plot_options.addSeries(periodogram);
            periodogram_plot.setOption(periodogram_plot_options.options, true);
        })
    }

    function toggleDataRelease() {
        lc_main_elem.hidden = !lc_main_elem.hidden;
        lc_table_elem.hidden = !lc_table_elem.hidden;

        // Update the plot when showing it again
        if (lc_main_elem.hidden === false) {
            window.setPlot(current_plot);
            plot.resize();
        }
    }

    /* Update plot on plot type change */
    window.setPlot = (type) => {
        current_plot = type;
        if (current_plot === "difference") {
            plot_options = new DifferenceLightCurveOptions(detections, non_detections, forced_photometry, plot_text_color);
        } else if (current_plot === "apparent") {
            plot_options = new ApparentLightCurveOptions(getDetectionsWithDR(), non_detections, forced_photometry, plot_text_color);
        } else if (current_plot === "folded" && period > 0) {
            plot_options = new FoldedLightCurveOptions(getDetectionsWithDR(), non_detections, forced_photometry, plot_text_color, period);
        }

        lc_folded_period_elem.hidden = !(current_plot === "folded" && period > 0);
        lc_periodogram_button_elem.hidden = !(current_plot === "folded" && period > 0);
        lc_periodogram_main_elem.hidden = !(current_plot === "folded" && period > 0 && is_periodogram_built);

        plot.setOption(plot_options.options, true);
    };


    /* Update plot text color on switch between dark/light mode */
    let container = document.getElementById("lightcurve-htmx-container");
    function setColorScheme() {
        const color_scheme = container.classList.contains("tw-dark") ? "tw-dark" : "tw-light";
        if (color_scheme === "tw-dark") {
            plot_text_color = "#fff";
        } else {
            plot_text_color = "#000";
        }
        window.setPlot(current_plot);
    }
    let color_scheme_observer = new MutationObserver(setColorScheme);
    color_scheme_observer.observe(container, { attributes: true, attributeFilter: ["class"] });

    /* First run color setup */
    setColorScheme()

    /* Set up Download and Data release buttons */
    document.getElementById("lc-periodogram-button").addEventListener("click", () => {
        if (!is_periodogram_built) build_priodogram();
        is_periodogram_built = true;
    });
    document.getElementById("lc-download").addEventListener("click", () => download(oid, detections, non_detections));
    document.getElementById("lc-dr").addEventListener("click", toggleDataRelease);


    function update_period(value) {
        value = parseFloat(value)

        period = value;
        lc_folded_period_slider_elem.value = value;
        lc_folded_period_value_elem.value = value;
        lc_folded_period_value_elem.step = compute_step(value)

        window.setPlot(current_plot);
    }

    update_period(period);

    lc_folded_period_slider_elem.addEventListener("change", () => update_period(lc_folded_period_slider_elem.value))
    lc_folded_period_value_elem.addEventListener("change", () => update_period(lc_folded_period_value_elem.value))

    window.addEventListener("load", setColorScheme);

</script>

<div id="lightcurve-htmx-container" class="tw-preflight" style="height: 60%;">
    <div id="lightcurve"
        class="tw-bg-white dark:tw-bg-[#1e1e1e] dark:tw-text-white tw-rounded tw-p-4 tw-flex tw-flex-col tw-h-full">
        <!-- Prepare a DOM with a defined width and height for ECharts -->
        <div id="lc-main" style="width: 100%; height: 100%; min-width: 0; min-height: 0;"></div>
        <div id="lc-table" class="tw-overflow-y-auto tw-flex-1" hidden>
            <table
                class="tw-min-w-full tw-border tw-border-gray-300 dark:tw-border-[#404040] tw-divide-y tw-divide-gray-200 dark:tw-divide-[#404040] dark:tw-text-white">
                <thead>
                    <tr class="tw-bg-gray-100 dark:tw-bg-[#252525]">
                        <th class="tw-w-12 tw-text-center">
                            {# <input type="checkbox" class="form-checkbox h-6 w-6" /> #}
                        </th>
                        <th class="tw-text-center">ObjectId</th>
                        <th class="tw-text-center">filterid</th>
                        <th class="tw-text-center">nepochs</th>
                        <th class="tw-text-center">fieldid</th>
                        <th class="tw-text-center">rcid</th>
                    </tr>
                </thead>
                <tbody class="tw-divide-y tw-divide-gray-200 dark:tw-divide-[#404040]">
                    {% for data in dr %}
                    <tr class="hover:tw-bg-gray-200 dark:hover:tw-bg-[#353535]">
                        <td class="tw-text-center">
                            <input type="checkbox" class="tw-form-checkbox tw-h-6 tw-w-6"
                                onchange="handleDRChange(event, {{data._id}})" />
                        </td>
                        <td class="tw-text-right">{{data._id}}</td>
                        <td class="tw-text-right">{{data.filterid}}</td>
                        <td class="tw-text-right">{{data.nepochs}}</td>
                        <td class="tw-text-right">{{data.fieldid}}</td>
                        <td class="tw-text-right">{{data.rcid}}</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        <div class="tw-grid tw-grid-cols-4 tw-gap-2">
            <div>
                <label class="tw-flex tw-items-center tw-space-x-2">
                    <input type="radio" name="data" value="difference" onclick="setPlot(value)" class="tw=form-radio"
                        checked>
                    <span>Difference Magnitude</span>
                    <div class="tooltip">
                        <i class="fa fa-question-circle tw-me-2"></i>
                        <div class="tooltip-text">
                            The difference Magnitude light curve is the absolute difference between science and
                            reference magnitudes.
                        </div>
                    </div>
                </label>
            </div>
            <div>
                <label class="tw-flex tw-items-center tw-space-x-2">
                    <input type="radio" name="data" value="apparent" onclick="setPlot(value)" class="tw-form-radio">
                    <span>Apparent Magnitude</span>
                    <div class="tooltip">
                        <i class="fa fa-question-circle tw-me-2"></i>
                        <div class="tooltip-text">
                            Apparent magnitude light curve results from adding/subtracting the fluxes from the
                            reference
                            and difference in the same unit system and then converting to magnitudes.
                        </div>
                    </div>
                </label>
            </div>
            <div>
                <label class="tw-flex tw-items-center tw-space-x-2">
                    <input type="radio" name="data" value="folded" onclick="setPlot(value)" class="tw-form-radio" {% if
                        period is none or period <=0 %} disabled {% endif %}>
                    <span style="{% if period is none or period <= 0 %} color: #999; {% endif %}">Folded</span>
                    <div class="tooltip">
                        <i class="fa fa-question-circle tw-me-2"></i>
                        <div class="tooltip-text">
                            The Period folded light curve, where time is transformed to time modulo the period
                            (Phase).
                        </div>
                    </div>
                </label>
            </div>
            <div>
                <div>
                    <button id="lc-periodogram-button" hidden
                        class="tw-bg-blue-500 dark:tw-bg-blue-700 tw-text-white tw-mt-2 tw-px-2 tw-py-1 tw-rounded hover:tw-bg-blue-600" style="display: block">
                        <i class="fa fa-eye tw-me-2"></i>
                        Display Periodogram
                    </button>
                    <button id="lc-dr"
                        class="tw-bg-blue-500 dark:tw-bg-blue-700 tw-text-white tw-mt-2 tw-px-2 tw-py-1 tw-rounded hover:tw-bg-blue-600">
                        <i class="fa fa-eye tw-me-2"></i>
                        Display DR
                    </button>
                </div>
                <a id="lc-download-ref" style="display: none;"></a>
                <button id="lc-download"
                    class="tw-bg-green-500 dark:tw-bg-green-700 tw-text-white tw-mt-2 tw-px-2 tw-py-1 tw-rounded hover:tw-bg-green-600">
                    <i class="fa fa-download tw-me-2"></i>
                    Download
                </button>
            </div>
        </div>
    </div>

    <div class="container tw-flex tw-justify-center tw-h-1/2" id="container-graphics"> 

        <div id="lc-periodogram-main" hidden style="width: 80%; height: 100%; min-width: 0; min-height: 0;"></div>
    </div>

    <div class="container">
        <div class="tw-grid tw-grid-cols-4 tw-gap-4">
            <div id="lc-folded-period" hidden class="tw-col-span-2 transition-transform ease-in-out duration-500 transform">
                <input id="lc-folded-period-slider" type="range" name="period_slider" min="0.050000" max="500" step="0.000001"
                    class="tw-w-4/6  tw-bg-black-500" />

                <input id="lc-folded-period-value" type="number" name="period_value" min="0.050000" max="500" step="0.000001"
                    class=" tw-w-1/6 border border-gray-300 rounded-md p-2 mt-2" />
            </div>        
        </div>
    </div>

</div>