{# <script id="htmx-script" src="https://unpkg.com/htmx.org@1.9.11"></script> #}
{# <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0"> #}
{# <link rel="stylesheet" href="{{API_URL}}/static/scores.css"> #}
<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0">
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="{{API_URL}}/static/scores.css">
    <title>Scores</title>

</head>

 <body class="tw-dark tw-flex tw-preflight tw-text-[#1e1e1e] dark:tw-text-white tw-bg-white tw-shadow-2xl dark:tw-bg-[#1e1e1e] tw-rounded-[6px] tw-relative tw-mt-3">  
     
     <div class="tw-bg-white tw-flex tw-shadow-2xl dark:tw-bg-[#1e1e1e] tw-w-[1500px] tw-rounded-[6px] tw-box-content tw-p-[10px] tw-relative tw-mt-3 tw-ml-3 ">
        <div class=tw-w-[50%]>
            <div class="tw-inline tw-text-black dark:tw-text-white tw-flex tw-items-center">
                    <div class="tw-inline">
                        <h1 class="tw-font-bold tw-text-2xl tw-pt-[30px] tw-pl-[5px] tw-mb-[20px]">Scores</h1>
                    </div>

                    <div class="tw-inline tw-relative tw-ml-2 tw-mt-[10px] tw-group">
                        <svg class="tw-h-6 tw-w-6 tw-text-gray-900 dark:tw-text-gray-500" data-slot="icon" fill="none" stroke-width="1.5" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                            <path path stroke-linecap="round" stroke-linejoin="round" d="M9.879 7.519c1.171-1.025 3.071-1.025 4.242 0 1.172 1.025 1.172 2.687 0 3.712-.203.179-.43.326-.67.442-.745.361-1.45.999-1.45 1.827v.75M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Zm-9 5.25h.008v.008H12v-.008Z"></path>
                        </svg>
                        <div class="tw-absolute tw-left-10 tw-mt-2 tw-hidden group-hover:tw-flex tw-flex-col tw-items-center tw-z-[9999] group-hover:tw-opacity-60">
                            <div class="tw-bg-gray-900 tw-text-red-500 tw-text-xs tw-rounded tw-px-4 tw-py-2">
                                If a value is None,  then that implies that there is no distribution value higher than the category score
                            </div>
                        </div>
                    </div> 
            </div>

            <button id="display-button" class="tw-flex tw-items-center tw-text-left tw-ml-[80px] tw-w-[75%] tw-h-[30px] tw-border-b tw-text-black dark:tw-text-white">
                    <div id="display-button-text" class="tw-flex-grow tw-justify-center"></div>
                    <div id='arrow-svg' class="tw-text-black dark:tw-text-white"></div>
            </button>

            <div id="mySelect" class="tw-preflight tw-ml-[30px] tw-box-content tw-absolute tw-opacity-100 tw-w-[45%] tw-h-fit tw-rounded-[50px] tw-shadow-2xl" style="display: none;">
            </div>

            <div class="tw-table tw-preflight dark:tw-text-white tw-text-black tw-w-full tw-mt-5" id="tableContainer">
                    
            </div>

            <div id="navigationMenu" class="tw-w-[95%] tw-mx-auto tw-text-sm">
                <div class="tw-flex tw-justify-between tw-items-center tw-pt-[25px]">
                    <div class="tw-flex tw-items-center tw-space-x-2">
                        <label class="tw-text-black dark:tw-text-white" for="rowSelector">Rows per page:</label>
                        <button class="tw-relative hover:tw-cursor-pointer" onclick="changeMenuArrow()">
                                <select id="rowSelect" class="tw-text-black tw-bg-white dark:tw-text-white dark:tw-bg-[#1e1e1e] tw-border-b tw-pr-2 tw-appearance-none tw-pointer-events-auto">
                                    <option value="5">5</option>
                                    <option value="10">10</option>
                                    <option value="14">All</option>
                                </select>
                        </button>
                    </div>
                    <div class="tw-text-black dark:tw-text-white">
                        <span id="first-number"></span> - <span id="second-number"></span> of <span id="total-number"></span>
                    </div>
                    <div class="tw-text-sm">
                        <button onclick="changePage(-1)" class="tw-text-black dark:tw-text-white tw-pr-[10px] tw-text-sm tw-rounded-full hover:tw-text-gray-600" id='leftArrow'> &lt; </button>
                        <button onclick="changePage(1)"  class="tw-text-black dark:tw-text-white tw-pl-[10px] tw-text-sm tw-rounded-full hover:tw-text-gray-600" id="rightArrow"> &gt; </button>
                    </div>
                </div>
            </div>
        </div>

        <div id="chartDiv" class=tw-w-[50%]>
            <canvas id="myChart"></canvas>
        </div>
     </div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
const columnNames = ['Category names','score', 'percentil', 'percentil_cut'];

const db = {{ scores_data | tojson }};

if (Object.keys(db).length === 0 ){
    
    document.getElementById('navigationMenu').style.display = 'none';
    const tableContainer = document.getElementById('tableContainer');
    const alertDiv = document.createElement('div');
    alertDiv.classList = "tw-ml-[100px] tw-mb-[50px] tw-opacity-70 tw-border-none tw-bg-red-900 tw-mt-10 tw-ml-10 tw-w-[500px] tw-rounded-xl tw-min-h-28 tw-flex tw-flex-row tw-justify-between tw-items-center"

    const textDiv = document.createElement('div');
    textDiv.classList = "tw-flex-grow tw-flex tw-justify-center tw-max-w-full tw-box-content tw-ml-[10px] tw-mt-[10px] tw-mb-[10px] tw-mr-[10x]";

    const paragraph = document.createElement('p');
    paragraph.classList = "tw-text-white tw-overflow-wrap-break-word tw-text-lg";
    paragraph.innerHTML = 'No scores for this object'

    textDiv.appendChild(paragraph);
    alertDiv.appendChild(textDiv);
    tableContainer.appendChild(alertDiv)

} else {

    function getGraphData(db, currentAnomaly, currentCategory){

        const dictKeys = Object.keys(db[currentAnomaly]['categories'][currentCategory]['graph_data']);

        const valueAxis = [];

        for (let i = 0; i < dictKeys.length; i++){
            valueAxis.push(db[currentAnomaly]['categories'][currentCategory]['graph_data'][i]['value']);
        }

        return valueAxis;

    }

    function createTableHead(columnNames, tableContainer, table){

        const headerRow = document.createElement("tr");

        for (let i = 0; i < columnNames.length; i++) {

            const th = document.createElement("th");

            th.textContent = wordsCleaner(columnNames[i]);

            headerRow.appendChild(th);

        };

        table.appendChild(headerRow);
        tableContainer.appendChild(table);
    };

    function createTableBody(numberOfCategories, columNames, tableContainer, table) {

        const existingTBody = table.querySelector('tbody');
        if (existingTBody) {
            existingTBody.remove();
        }

        const tBody = document.createElement('tbody');
        tBody.setAttribute('id', 'dataTableBody');

        for (let i = 0; i < 5; i++) {
            const dataRow = document.createElement("tr");
            
            for (let j = 0; j < columnNames.length; j++) {
                const td = document.createElement("td");
                td.className = 'tw-px-2 tw-py-1 tw-text-left';
                td.id = `cell-${i}-${j}`;
                dataRow.appendChild(td);
            }
            tBody.appendChild(dataRow);
        }

        table.appendChild(tBody);

        if (!tableContainer.contains(table)) {
            tableContainer.appendChild(table);
        }
    }

    function dataInjection(numberOfCategories, columnNames, db, currentAnomaly, startRow, lastRow){
        // inyeccion de datos
        //console.log(currentAnomaly)
        const currentDict = db[currentAnomaly]['categories'];
        const categoryKeys = Object.keys(currentDict)
        let totalRows;
        if (numberOfCategories < 5){
            totalRows = numberOfCategories;
        } else {
            totalRows = 5;
        }

        for (let i = 0; i < totalRows ; i++) {
            for (let j = 0; j < columnNames.length; j++){
                let name = 'cell-'+String(i)+'-'+String(j);
                if (j === 0){
                    document.getElementById(name).innerHTML = categoryKeys[i + startRow];
                } else {
                    if (j === 2 && currentDict[categoryKeys[i + startRow]][columnNames[j]] !== 0){
                        document.getElementById(name).innerHTML = wordsCleaner(currentDict[categoryKeys[i + startRow]][columnNames[j]]);
                    } else {
                        document.getElementById(name).innerHTML = currentDict[categoryKeys[i + startRow]][columnNames[j]];
                    }
                }

            };
        };
    };

    function createDisplayMenu(numberOfAnomalies, anomalies, numberOfCategories, columnNames, db, table, tableContainer){
        //console.log(anomalies)
        const mySelect = document.getElementById('mySelect')
        for (let i = 0; i < numberOfAnomalies; i++){
            newA = document.createElement('a');
            newA.id = anomalies[i];
            newA.value = anomalies[i];
            newA.classList = 'tw-text-center tw-text-lg tw-text-white tw-h-[100%] tw-w-[100%] tw-mt-[30px]';
            newA.target = '_blank';

            const newDiv = document.createElement('div');
            
            newDiv.innerHTML = wordsCleaner(anomalies[i]);
            newDiv.classList = `tw-rounded-br-[10px] tw-rounded-bl-[10px] tw-rounded-tr-[10px] tw-rounded-tl-[10px] tw-cursor-pointer tw-text-[#1e1e1e] dark:tw-text-white tw-bg-white dark:tw-bg-[#1e1e1e] tw-w-[100%] tw-grid tw-justify-center tw-items-center hover:tw-bg-[#e5e4e2] dark:hover:tw-bg-[#3b3939]`;
            
            const optionsHeight = String(100 / anomalies.length);

            mySelect.style.height = `${40 * anomalies.length}px`

            newDiv.setAttribute('style', `height: ${optionsHeight}%`);

            newA.appendChild(newDiv);
            mySelect.appendChild(newA);

            document.getElementById(anomalies[i]).addEventListener('click', function() {
                //const arrowSvgElement = document.getElementById('arrow-svg');
                const displayButtonTextElement = document.getElementById('display-button-text');

                if (displayButtonTextElement) {

                    displayButtonTextElement.innerHTML = wordsCleaner(anomalies[i]);
                    const currentCategories = Object.keys(db[anomalies[i]].categories);
                    const numberOfCategories = currentCategories.length;
                    if (numberOfCategories < 5){
                        createTableBody(numberOfCategories, columnNames.length, tableContainer, table);
                        dataInjection(numberOfCategories, columnNames, db, anomalies[i], 0, numberOfCategories);
                    } else {
                        createTableBody(numberOfCategories, columnNames, tableContainer, table);
                        currentAnomaly = anomalies[i]
                        changePage(0);
                    }
                    //console.log('%%%%%%%%%%%%%%%%%%%%%%')
                    //console.log(this.value)
                    //console.log('%%%%%%%%%%%%%%%%%%%%%%')
                    console.log(anomalies[i])
                    let currentDictChanged = createDictionaryDataForChart(db, numberOfCategories, currentCategories, anomalies[i])

                    mixedChart.data = currentDictChanged;
                    mixedChart.update();

                    displayMenu();
                }
            });

        };
    };

    function displayMenu(auxBool = 0){

        const arrowDown = `<svg class='tw-h-6 tw-w-6' xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
            <path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5" />
        </svg>`

        const arrowUp = `<svg class='tw-h-6 tw-w-6' xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="m4.5 15.75 7.5-7.5 7.5 7.5" />
                                </svg>`

        if (auxBool === 1){
            boolDisplay = 1;
        }

        if (boolDisplay === 0){
            document.getElementById('mySelect').style.display = 'block';
            document.getElementById('arrow-svg').innerHTML = arrowUp;
            boolDisplay = 1;
        } else {
            document.getElementById('mySelect').style.display = 'none';
            document.getElementById('arrow-svg').innerHTML = arrowDown;
            boolDisplay = 0;
        };

    };

    function wordsCleaner(word){

        let wordSplitted = word.split('_');

        if (wordSplitted.length === 1){
            return wordSplitted[0].charAt(0).toUpperCase() + wordSplitted[0].slice(1);
        } else {
            wordSplitted[0] = wordSplitted[0].charAt(0).toUpperCase() + wordSplitted[0].slice(1);
            return wordSplitted.join(' ');
        };
    };

    const arrowDown = `<svg class='tw-h-6 tw-w-6' xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="size-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="m19.5 8.25-7.5 7.5-7.5-7.5" />
                            </svg>`
                        
    document.getElementById('arrow-svg').innerHTML = arrowDown;

    const anomalies = Object.keys(db);
    //console.log('#############################')
    //console.log(anomalies)
    //console.log('#############################')
    const numberOfAnomalies = anomalies.length;

    let boolDisplay = 0; 
    document.getElementById('display-button').addEventListener('click', () => {  
        displayMenu()
        });

    document.getElementById('display-button-text').innerHTML = wordsCleaner(anomalies[0]);

    const currentCategories = Object.keys(db[anomalies[0]].categories);
    const numberOfCategories = currentCategories.length;

    // Creating base table

    const tableContainer = document.getElementById('tableContainer');
    tableContainer.classList.add('tw-overflow-x-auto');
    
    const table = document.createElement('table');
    table.classList = 'tw-table dark:tw-text-white tw-w-full';

    createDisplayMenu(numberOfAnomalies, anomalies, numberOfCategories, columnNames, db, table, tableContainer);
    createTableHead(columnNames, tableContainer, table);
    createTableBody(numberOfCategories, columnNames, tableContainer, table);
    //dataInjection(numberOfCategories, columnNames, db, anomalies[0]);

    const clickInButton = document.getElementById('display-button');
    
    let auxBool;
    function handleOutsideClick(event) {
        if (!clickInButton.contains(event.target)) {
            auxBool = 1;
            displayMenu(auxBool);
        }
    }

    document.addEventListener('click',handleOutsideClick);



    ///////////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////////////////////

    const ctx = document.getElementById('myChart').getContext('2d');


    const mixedChart = new Chart(ctx, {
        type: 'line',
        data: createDictionaryDataForChart(db, numberOfCategories, Object.keys(db[anomalies[0]]['categories']), anomalies[0]),
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: true,
                    text: 'Mixed Chart'
                }
            },
            indexAxis: 'y',
            scales: {
                x: {
                    beginAtZero: true
                },
                y:{
                    reverse: true
                }
            }
        }
    });
    
    function createDictionaryDataForChart(db, numberOfCategories, categories, currentAnomaly){

        const dataSetsList = [];

        //console.log(numberOfCategories)

        for (let i = 0; i < numberOfCategories; i++){
            //console.log(categories[i])
            //console.log(getGraphData(db, currentAnomaly, categories[i]))
            dataSetsList.push({
                type: 'line',
                label: `${categories[i]}`,
                data: getGraphData(db, currentAnomaly, categories[i]),
                pointRadius: 3,
            })
        // NO BORRAR LAS LINEAS COMENTADAS     

            if (db[currentAnomaly]['categories'][categories[i]]['percentil_cut'] > 0){

                const numbber = db[currentAnomaly]['categories'][categories[i]]['percentil_cut'];

                dataSetsList.push({
                type: 'line',
                label: `${categories[i]}_cut`,
                data: [numbber,numbber,numbber,numbber,numbber,numbber,numbber,numbber,numbber,numbber], // obviamente hay que rehacer esta aberracion, pero por mientras sirve
                pointRadius: 0,
            })

            } 
        }
        //console.log(dataSetsList)
        const finalData = {
            labels: ['Percentil 10', 'Percentil 20', 'Percentil 30', 'Percentil 40', 'Percentil 50', 'Percentil 60', 'Percentil 70', 'Percentil 80', 'Percentil 90', 'Saturation'],
            datasets: dataSetsList,
        };

        return finalData
    }

    let startRow = 0;
    let lastRow = 5; 
    let auxNumber = findNearestDivisibleByFive(numberOfCategories);
    document.getElementById('display-button').addEventListener('click', () => {
        currentAnomaly = this.value;
    })

    currentAnomaly = anomalies[0];

    function findNearestDivisibleByFive(num) {
        return Math.ceil(num / 5) * 5;
    }

    function changePage(bool){
        

        if (bool === -1 && startRow === 0){
        } else if (bool === 1 && lastRow > 20) {
        } else {

            if (lastRow < numberOfCategories){
                startRow += 5*bool;
                lastRow += 5*bool;
            } else {
                lastRow = numberOfCategories;
            }
            
            if (startRow >= 0){
                dataInjection(numberOfCategories, columnNames, db, currentAnomaly, startRow, lastRow);
            }
        }
        //console.log(startRow)
        //console.log(lastRow)
    }

    changePage(0);
}

</script>
 </body>

