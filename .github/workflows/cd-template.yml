name: Build Staging

concurrency: deployment

on:
  workflow_call:
    inputs:
      packages:
        required: true
        type: string
    secrets:
        ADMIN_TOKEN:
          required: true
        AWS_ROLE_STAGING:
          required: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GHCR_TOKEN: ${{ secrets.ADMIN_TOKEN }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'poetry'
      - name: Install dependencies
        run: |
          cd ci
          poetry install
      - name: Run dagger pipeline
        run: |
          cd ci
          poetry run python main.py build ${{ inputs.packages }} staging

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_STAGING }}
          aws-region: us-east-1
          output-credentials: true
          unset-current-credentials: true
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'poetry'
      - name: Install dependencies
        run: |
          cd ci
          poetry install
      - name: Run dagger pipeline
        run: |
          cd ci
          poetry run python main.py deploy ${{ inputs.packages }} staging

  test-end-to-end:
    needs: deploy-staging
    runs-on: ubuntu-latest
    env:
      GHCR_TOKEN: ${{ secrets.ADMIN_TOKEN }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'poetry'
      - name: Install dependencies
        run: |
          cd ci
          poetry install
      - name: Run dagger pipeline
        run: |
          cd ci
          poetry run python main.py test ${{ inputs.packages }} staging
  
  rollback:
    needs: test-end-to-end
    if: needs.test-end-to-end.result == 'failure'
    runs-on: ubuntu-latest
    env:
      GHCR_TOKEN: ${{ secrets.ADMIN_TOKEN }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_STAGING }}
          aws-region: us-east-1
          output-credentials: true
          unset-current-credentials: true
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'poetry'
      - name: Install dependencies
        run: |
          cd ci
          poetry install
      - name: Run dagger pipeline
        run: |
          cd ci
          poetry run python main.py rollback ${{ inputs.packages }} staging

  release-chart:
    needs: test-end-to-end
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      - name: Configure Git
        run: |
          git config user.name "alerceadmin"
          git config user.email "alerceadmin@users.noreply.github.com"
      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.6.0
        env:
          CR_TOKEN: "${{ secrets.ADMIN_TOKEN }}"

  deploy-production:
    needs: release-chart
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_PRODUCTION }}
          aws-region: us-east-1
          output-credentials: true
          unset-current-credentials: true
      - name: Install poetry
        run: pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: 'poetry'
      - name: Install dependencies
        run: |
          cd ci
          poetry install
      - name: Run dagger pipeline
        run: |
          cd ci
          poetry run python main.py deploy ${{ inputs.packages }} production
